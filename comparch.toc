\contentsline {paragraph}{short}{2}{section*.1}%
\contentsline {chapter}{Contents}{3}{chapter*.2}%
\contentsline {chapter}{\numberline {1}Part I(a) - ISA Reminder, Assembly Language, Compiler - W 1.1}{8}{chapter.1}%
\contentsline {section}{\numberline {1.1}From High Level Languages to Assembly Language}{8}{section.1.1}%
\contentsline {subsection}{\numberline {1.1.1}High Level Languages}{8}{subsection.1.1.1}%
\contentsline {subsection}{\numberline {1.1.2}Assembly Language}{8}{subsection.1.1.2}%
\contentsline {section}{\numberline {1.2}Processors}{9}{section.1.2}%
\contentsline {section}{\numberline {1.3}Joint or Disjoint Program and Data Memories}{10}{section.1.3}%
\contentsline {section}{\numberline {1.4}The Encoding problem}{11}{section.1.4}%
\contentsline {subsection}{\numberline {1.4.1}The Stupid Solution}{11}{subsection.1.4.1}%
\contentsline {subsection}{\numberline {1.4.2}RISC-V Encoding (The Solution)}{11}{subsection.1.4.2}%
\contentsline {subsection}{\numberline {1.4.3}Automating this process}{12}{subsection.1.4.3}%
\contentsline {subsubsection}{Assembler}{12}{section*.6}%
\contentsline {subsubsection}{Compiler}{12}{section*.7}%
\contentsline {section}{\numberline {1.5}ISA (Instruction Set Architecture)}{13}{section.1.5}%
\contentsline {chapter}{\numberline {2}Part I(b) - ISA, Functions, and Stack - W 1.2}{14}{chapter.2}%
\contentsline {section}{\numberline {2.1}Arithmetic and Logic Instructions in RISCV}{14}{section.2.1}%
\contentsline {subsection}{\numberline {2.1.1}Constants must be encoded on 12 bits}{14}{subsection.2.1.1}%
\contentsline {subsection}{\numberline {2.1.2}Assembler Directives}{14}{subsection.2.1.2}%
\contentsline {subsection}{\numberline {2.1.3}The \texttt {x0} Register}{15}{subsection.2.1.3}%
\contentsline {section}{\numberline {2.2}PseudoInstructions}{15}{section.2.2}%
\contentsline {subsection}{\numberline {2.2.1}Control flow instructions}{16}{subsection.2.2.1}%
\contentsline {subsection}{\numberline {2.2.2}If-Then-Else}{16}{subsection.2.2.2}%
\contentsline {subsection}{\numberline {2.2.3}Jumps and Branches}{16}{subsection.2.2.3}%
\contentsline {subsection}{\numberline {2.2.4}Comparaisions}{17}{subsection.2.2.4}%
\contentsline {subsection}{\numberline {2.2.5}Do-While}{17}{subsection.2.2.5}%
\contentsline {section}{\numberline {2.3}Functions}{17}{section.2.3}%
\contentsline {subsection}{\numberline {2.3.1}Jump to the Function/Retun control to the calling program}{17}{subsection.2.3.1}%
\contentsline {subsubsection}{The too simple not working approach}{17}{section*.8}%
\contentsline {subsubsection}{The Good Approach}{18}{section*.9}%
\contentsline {subsection}{\numberline {2.3.2}Jump Instructions}{18}{subsection.2.3.2}%
\contentsline {subsection}{\numberline {2.3.3}Register Conventions}{19}{subsection.2.3.3}%
\contentsline {subsection}{\numberline {2.3.4}Back to the good (not so good) approach}{19}{subsection.2.3.4}%
\contentsline {subsection}{\numberline {2.3.5}One simple solution (still not good)}{19}{subsection.2.3.5}%
\contentsline {subsection}{\numberline {2.3.6}Acquire storage resources the function needs (still not it)}{20}{subsection.2.3.6}%
\contentsline {subsubsection}{Problem: Recursive Functions}{20}{section*.10}%
\contentsline {subsection}{\numberline {2.3.7}The Stack}{20}{subsection.2.3.7}%
\contentsline {subsubsection}{Dynamic Memory Allocation}{21}{section*.11}%
\contentsline {subsubsection}{Retrieving Data from the Stack}{21}{section*.12}%
\contentsline {subsubsection}{Memory Deallocation}{22}{section*.13}%
\contentsline {subsubsection}{The Stack Pointer}{22}{section*.14}%
\contentsline {subsection}{\numberline {2.3.8}Spilling Registers to Memory}{22}{subsection.2.3.8}%
\contentsline {subsection}{\numberline {2.3.9}Register across functions}{22}{subsection.2.3.9}%
\contentsline {subsection}{\numberline {2.3.10}Preserving Registers}{23}{subsection.2.3.10}%
\contentsline {section}{\numberline {2.4}Passing Arguments in RISC-V}{23}{section.2.4}%
\contentsline {subsection}{\numberline {2.4.1}Option 1: Using Registers}{23}{subsection.2.4.1}%
\contentsline {subsection}{\numberline {2.4.2}Option 2: Using the Stack}{24}{subsection.2.4.2}%
\contentsline {subsection}{\numberline {2.4.3}The RISC-V Approach}{24}{subsection.2.4.3}%
\contentsline {section}{\numberline {2.5}Summary of RISC-V Register Conventions}{24}{section.2.5}%
\contentsline {chapter}{\numberline {3}Part I(c) - ISA Memory and Addressing Modes - W 2.1}{25}{chapter.3}%
\contentsline {section}{\numberline {3.1}Memory}{25}{section.3.1}%
\contentsline {subsection}{\numberline {3.1.1}Address and Data}{25}{subsection.3.1.1}%
\contentsline {section}{\numberline {3.2}Many Types of Memories}{26}{section.3.2}%
\contentsline {subsection}{\numberline {3.2.1}Functional Taxonomy of Memories}{26}{subsection.3.2.1}%
\contentsline {subsection}{\numberline {3.2.2}Taxonomy of Random Access Memories}{26}{subsection.3.2.2}%
\contentsline {subsection}{\numberline {3.2.3}Basic Structure}{27}{subsection.3.2.3}%
\contentsline {subsection}{\numberline {3.2.4}Write Operations}{27}{subsection.3.2.4}%
\contentsline {subsection}{\numberline {3.2.5}Read Operations}{27}{subsection.3.2.5}%
\contentsline {subsection}{\numberline {3.2.6}Practical SRAMs}{27}{subsection.3.2.6}%
\contentsline {subsection}{\numberline {3.2.7}DRAMs}{28}{subsection.3.2.7}%
\contentsline {subsection}{\numberline {3.2.8}Ideal Random Access Memory}{28}{subsection.3.2.8}%
\contentsline {subsection}{\numberline {3.2.9}Physical Organisation }{28}{subsection.3.2.9}%
\contentsline {subsection}{\numberline {3.2.10}Realistic ROM Array}{29}{subsection.3.2.10}%
\contentsline {subsection}{\numberline {3.2.11}Static Ram Typical Interface}{29}{subsection.3.2.11}%
\contentsline {section}{\numberline {3.3}Typical Asynchronous SRAM Read Cycle}{29}{section.3.3}%
\contentsline {subsubsection}{Read Cycle}{29}{section*.15}%
\contentsline {subsubsection}{Write Cycle}{30}{section*.16}%
\contentsline {section}{\numberline {3.4}Where is Memory in the Processor?}{30}{section.3.4}%
\contentsline {subsection}{\numberline {3.4.1}Arithmetic and Logic Instructions}{30}{subsection.3.4.1}%
\contentsline {subsubsection}{Load Instructions}{31}{section*.17}%
\contentsline {subsubsection}{Load and Store: The RiSC-V Way}{31}{section*.18}%
\contentsline {subsubsection}{A Load/Store Architecture}{31}{section*.19}%
\contentsline {section}{\numberline {3.5}More Addressing Modes? Not in RISC-V!}{31}{section.3.5}%
\contentsline {subsection}{\numberline {3.5.1}Word Adressed Memory}{32}{subsection.3.5.1}%
\contentsline {subsection}{\numberline {3.5.2}Loading Words (lw) and Instructions}{32}{subsection.3.5.2}%
\contentsline {subsection}{\numberline {3.5.3}Loading Bytes (lb)}{32}{subsection.3.5.3}%
\contentsline {subsection}{\numberline {3.5.4}A Few More Load/Store Instructions}{32}{subsection.3.5.4}%
\contentsline {subsection}{\numberline {3.5.5}Access as it is more suitable}{33}{subsection.3.5.5}%
\contentsline {subsubsection}{Counting Characters in a String}{33}{section*.20}%
\contentsline {subsection}{\numberline {3.5.6}Loading Bytes (lb)}{34}{subsection.3.5.6}%
\contentsline {subsubsection}{Which Byte Where?}{34}{section*.21}%
\contentsline {chapter}{\numberline {4}Part I(d) - ISA Arrays and Data Structures - W 2.2}{36}{chapter.4}%
\contentsline {section}{\numberline {4.1}Arrays}{36}{section.4.1}%
\contentsline {subsection}{\numberline {4.1.1}Different Ways to Store Arrays}{36}{subsection.4.1.1}%
\contentsline {subsection}{\numberline {4.1.2}Adding Positive Elements}{37}{subsection.4.1.2}%
\contentsline {subsection}{\numberline {4.1.3}Pointer to Memory vs Index in Array}{38}{subsection.4.1.3}%
\contentsline {subsubsection}{In C}{39}{section*.22}%
\contentsline {subsubsection}{We need a good compiler}{39}{section*.23}%
\contentsline {chapter}{\numberline {5}Part I(e) - ISA Arithmetic - W 3.1, 3.2}{40}{chapter.5}%
\contentsline {section}{\numberline {5.1}Notation}{40}{section.5.1}%
\contentsline {section}{\numberline {5.2}Numbers}{40}{section.5.2}%
\contentsline {subsection}{\numberline {5.2.1}Unsigned Integers}{40}{subsection.5.2.1}%
\contentsline {subsection}{\numberline {5.2.2}Signed Integers}{41}{subsection.5.2.2}%
\contentsline {subsubsection}{Sign and Magnitude}{41}{section*.24}%
\contentsline {subsection}{\numberline {5.2.3}Radix's Complement}{41}{subsection.5.2.3}%
\contentsline {subsection}{\numberline {5.2.4}Two's Complement Subtraction}{42}{subsection.5.2.4}%
\contentsline {subsection}{\numberline {5.2.5}Addition Is Unchanged from Unsigned}{43}{subsection.5.2.5}%
\contentsline {subsection}{\numberline {5.2.6}Sign Extension}{43}{subsection.5.2.6}%
\contentsline {subsubsection}{Example: 4-bit to 8-bit Conversion}{43}{section*.25}%
\contentsline {subsection}{\numberline {5.2.7}Signed and Unsigned Instructions}{43}{subsection.5.2.7}%
\contentsline {section}{\numberline {5.3}Overflow}{44}{section.5.3}%
\contentsline {subsection}{\numberline {5.3.1}Overflow in 2's Complement}{44}{subsection.5.3.1}%
\contentsline {subsection}{\numberline {5.3.2}Overflow in Software}{45}{subsection.5.3.2}%
\contentsline {subsection}{\numberline {5.3.3}Detect Addition Overflow in Software}{45}{subsection.5.3.3}%
\contentsline {section}{\numberline {5.4}A Strange but Useful Property}{45}{section.5.4}%
\contentsline {subsection}{\numberline {5.4.1}Two's Complement Subtractor}{46}{subsection.5.4.1}%
\contentsline {subsection}{\numberline {5.4.2}Two's Complement Add/Subtract Unit}{46}{subsection.5.4.2}%
\contentsline {section}{\numberline {5.5}Bounds Check Optimization}{47}{section.5.5}%
\contentsline {section}{\numberline {5.6}Floating Point Representation}{47}{section.5.6}%
\contentsline {subsubsection}{Properties of Floating Point Numbers}{48}{section*.26}%
\contentsline {subsubsection}{Standardization and Hardware Support}{48}{section*.27}%
\contentsline {subsubsection}{Example: Decimal to IEEE 754 Simple Precision (32 Bits) Conversion}{48}{section*.28}%
\contentsline {subsection}{\numberline {5.6.1}Sign-and-Magnitude Addition}{49}{subsection.5.6.1}%
\contentsline {subsubsection}{Solution 1}{49}{section*.29}%
\contentsline {subsubsection}{Solution 2}{50}{section*.30}%
\contentsline {chapter}{\numberline {6}Part II(a) - I/O - Exceptions Multicycle Processor W - 3.2, 4.1}{51}{chapter.6}%
\contentsline {section}{\numberline {6.1}Processor}{51}{section.6.1}%
\contentsline {subsection}{\numberline {6.1.1}Unified Memory}{51}{subsection.6.1.1}%
\contentsline {subsection}{\numberline {6.1.2}Single-Cycle Processor}{52}{subsection.6.1.2}%
\contentsline {section}{\numberline {6.2}Propagation Time}{52}{section.6.2}%
\contentsline {subsection}{\numberline {6.2.1}Increasing the Frequency}{53}{subsection.6.2.1}%
\contentsline {subsection}{\numberline {6.2.2}Two-Cycle Processor}{53}{subsection.6.2.2}%
\contentsline {subsection}{\numberline {6.2.3}Not All Paths Are Born Equal}{53}{subsection.6.2.3}%
\contentsline {subsection}{\numberline {6.2.4}Asynchronous/Synchronous Memories}{54}{subsection.6.2.4}%
\contentsline {section}{\numberline {6.3}Multicycle Processor}{54}{section.6.3}%
\contentsline {section}{\numberline {6.4}Mealy or Moore?}{55}{section.6.4}%
\contentsline {section}{\numberline {6.5}Processor - Building the Circuit}{55}{section.6.5}%
\contentsline {subsection}{\numberline {6.5.1}Adding the Instruction Register}{56}{subsection.6.5.1}%
\contentsline {subsection}{\numberline {6.5.2}Adding functionality}{57}{subsection.6.5.2}%
\contentsline {subsection}{\numberline {6.5.3}I-Type Instructions Need RF and ALU}{57}{subsection.6.5.3}%
\contentsline {subsection}{\numberline {6.5.4}R-Type Instructions and Second Operand Selection}{58}{subsection.6.5.4}%
\contentsline {subsection}{\numberline {6.5.5}And More, and More...}{59}{subsection.6.5.5}%
\contentsline {subsection}{\numberline {6.5.6}Guidelines for Writing Verilog}{59}{subsection.6.5.6}%
\contentsline {subsection}{\numberline {6.5.7}Detailing Complex Combinational Modules (ALU)}{60}{subsection.6.5.7}%
\contentsline {subsection}{\numberline {6.5.8}Verilog - Sticking to Basic Paterns}{60}{subsection.6.5.8}%
\contentsline {chapter}{\numberline {7}Part II(b) - Processor, I/Os, and Exceptions W - 4.1 - 4.2}{61}{chapter.7}%
\contentsline {section}{\numberline {7.1}The CPU}{61}{section.7.1}%
\contentsline {section}{\numberline {7.2}Physical Memory Map}{62}{section.7.2}%
\contentsline {subsection}{\numberline {7.2.1}Connecting CPU and Memory}{62}{subsection.7.2.1}%
\contentsline {section}{\numberline {7.3}Input/Output (I/O) Devices}{63}{section.7.3}%
\contentsline {subsection}{\numberline {7.3.1}Accessing I/Os: Port-Mapped I/O (PMIO)}{63}{subsection.7.3.1}%
\contentsline {subsubsection}{Accessing I/Os: Memory Mapped I/O(MMIO)}{63}{section*.31}%
\contentsline {subsection}{\numberline {7.3.2}Memory Mapped I/O (MMIO)}{64}{subsection.7.3.2}%
\contentsline {section}{\numberline {7.4}Example - A/D Converter}{65}{section.7.4}%
\contentsline {subsection}{\numberline {7.4.1}Bus Interface}{65}{subsection.7.4.1}%
\contentsline {subsection}{\numberline {7.4.2}Memory Mapping}{65}{subsection.7.4.2}%
\contentsline {subsection}{\numberline {7.4.3}Assembling everything}{66}{subsection.7.4.3}%
\contentsline {subsubsection}{Software Implementation}{66}{section*.35}%
\contentsline {section}{\numberline {7.5}What do these tri-state buffers do?}{67}{section.7.5}%
\contentsline {subsection}{\numberline {7.5.1}A Classic UART}{68}{subsection.7.5.1}%
\contentsline {chapter}{\numberline {8}Part II(c) - Interrupts W - 5.1 - 5.2}{69}{chapter.8}%
\contentsline {section}{\numberline {8.1}I/O Polling}{69}{section.8.1}%
\contentsline {section}{\numberline {8.2}I/O Interrupts}{69}{section.8.2}%
\contentsline {subsection}{\numberline {8.2.1}The Basic Concept of I/O Interrupts}{70}{subsection.8.2.1}%
\contentsline {subsection}{\numberline {8.2.2}Interrupt Cycle Description}{71}{subsection.8.2.2}%
\contentsline {subsection}{\numberline {8.2.3}I/O Interrupt Priorities: Daisy Chain Arbitration}{72}{subsection.8.2.3}%
\contentsline {section}{\numberline {8.3}Direct Memory Access (DMA)}{72}{section.8.3}%
\contentsline {subsection}{\numberline {8.3.1}Timer and Interrupt Mechanism}{74}{subsection.8.3.1}%
\contentsline {chapter}{\numberline {9}Part II(d) - Processor, I/Os, and Exceptions W - 6.1 - 6.2}{75}{chapter.9}%
\contentsline {section}{\numberline {9.1}Exceptions, Interrupts, Faults, Traps, and Checks}{75}{section.9.1}%
\contentsline {paragraph}{Control Flow}{75}{section*.36}%
\contentsline {paragraph}{Exceptions}{75}{section*.37}%
\contentsline {paragraph}{Exception Handlers}{75}{section*.38}%
\contentsline {paragraph}{Naming Conventions}{75}{section*.39}%
\contentsline {subsection}{\numberline {9.1.1}Undefined Instruction}{76}{subsection.9.1.1}%
\contentsline {subsection}{\numberline {9.1.2}Optional \texttt {fadd.s} Instruction}{76}{subsection.9.1.2}%
\contentsline {subsection}{\numberline {9.1.3}Outline of an Undefined Instruction Handler}{76}{subsection.9.1.3}%
\contentsline {section}{\numberline {9.2}Exceptions and Interrupts}{77}{section.9.2}%
\contentsline {subsection}{\numberline {9.2.1}A Possible Classification of Exceptions}{77}{subsection.9.2.1}%
\contentsline {subsection}{\numberline {9.2.2}Watchpoint}{77}{subsection.9.2.2}%
\contentsline {subsection}{\numberline {9.2.3}Raising Exceptions}{78}{subsection.9.2.3}%
\contentsline {subsection}{\numberline {9.2.4}Assessing the Position of an Exception}{78}{subsection.9.2.4}%
\contentsline {subsection}{\numberline {9.2.5}Assessing the Cause of Exception}{79}{subsection.9.2.5}%
\contentsline {subsection}{\numberline {9.2.6}RISC-V Machine-Mode Exception Handling}{79}{subsection.9.2.6}%
\contentsline {subsubsection}{Control and Status Registers (CSRs)}{79}{section*.40}%
\contentsline {subsubsection}{Instructions for Accessing CSRs}{79}{section*.41}%
\contentsline {subsubsection}{Returning from Exceptions}{79}{section*.42}%
\contentsline {subsection}{\numberline {9.2.7}RISC-V Interrupt and Exception Codes}{79}{subsection.9.2.7}%
\contentsline {subsection}{\numberline {9.2.8}Possible Undefined Instruction Handler}{80}{subsection.9.2.8}%
\contentsline {subsection}{\numberline {9.2.9}RISC-V Machine-Mode Interrupt Handling}{81}{subsection.9.2.9}%
\contentsline {section}{\numberline {9.3}The Stack Problem}{81}{section.9.3}%
\contentsline {subsection}{\numberline {9.3.1}Stack-Full Detection ?}{82}{subsection.9.3.1}%
\contentsline {subsection}{\numberline {9.3.2}Writing Handlers is Very Very Tricky}{82}{subsection.9.3.2}%
\contentsline {subsection}{\numberline {9.3.3}Speaking of the Stack...}{82}{subsection.9.3.3}%
\contentsline {section}{\numberline {9.4}Protection: I/Os Are Not for Everyone}{83}{section.9.4}%
\contentsline {subsection}{\numberline {9.4.1}Levels of Privilege: Processor Modes}{83}{subsection.9.4.1}%
\contentsline {subsection}{\numberline {9.4.2}Processor Tasks on Exception}{84}{subsection.9.4.2}%
\contentsline {subsection}{\numberline {9.4.3}Priorities in Interrupt Handling}{84}{subsection.9.4.3}%
\contentsline {subsection}{\numberline {9.4.4}More challenges in Writing Exception Handlers}{84}{subsection.9.4.4}%
\contentsline {section}{\numberline {9.5}Example - Back to Our A/D Converter}{85}{section.9.5}%
\contentsline {subsection}{\numberline {9.5.1}Simple IREQ and IACK Mechanism}{85}{subsection.9.5.1}%
\contentsline {subsection}{\numberline {9.5.2}A/D Converter - startADC}{85}{subsection.9.5.2}%
\contentsline {subsection}{\numberline {9.5.3}A/D Converter - Software:handler}{86}{subsection.9.5.3}%
\contentsline {subsection}{\numberline {9.5.4}A/D Converter - insertIntoBuffer}{86}{subsection.9.5.4}%
\contentsline {subsection}{\numberline {9.5.5}A/D Converter - readADC}{87}{subsection.9.5.5}%
\contentsline {chapter}{\numberline {10}Part II(e) - Processor, I/Os, and Exceptions - Example W - 6.2}{88}{chapter.10}%
\contentsline {section}{\numberline {10.1}Part Ia: Connecitng an Input Peripheral}{88}{section.10.1}%
\contentsline {section}{\numberline {10.2}Bus Protocol}{88}{section.10.2}%
\contentsline {section}{\numberline {10.3}Assembling the Circuit}{89}{section.10.3}%
\contentsline {section}{\numberline {10.4}Part 1b: Reading the Input Ports}{89}{section.10.4}%
\contentsline {subsection}{\numberline {10.4.1}Software: buttons}{89}{subsection.10.4.1}%
\contentsline {section}{\numberline {10.5}Part 2a - Connecting an Output Peripheral}{90}{section.10.5}%
\contentsline {section}{\numberline {10.6}Assembling everything}{90}{section.10.6}%
\contentsline {section}{\numberline {10.7}Part 3a: Use Interrupts}{90}{section.10.7}%
\contentsline {subsection}{\numberline {10.7.1}Interrupt Acknowledgement Process}{91}{subsection.10.7.1}%
\contentsline {subsection}{\numberline {10.7.2}Solution}{92}{subsection.10.7.2}%
\contentsline {chapter}{\numberline {11}Part III(a) - Memory Hierarchy - Caches}{93}{chapter.11}%
\contentsline {section}{\numberline {11.1}Our Goal : Use Different Memories}{93}{section.11.1}%
\contentsline {subsection}{\numberline {11.1.1}What Memory ot Use?}{94}{subsection.11.1.1}%
\contentsline {subsection}{\numberline {11.1.2}Spatial and Temporal Locality}{94}{subsection.11.1.2}%
\contentsline {paragraph}{Temporal Locality}{94}{section*.49}%
\contentsline {paragraph}{Spatial Locality}{94}{section*.50}%
\contentsline {subsection}{\numberline {11.1.3}Placement Policy Design}{94}{subsection.11.1.3}%
\contentsline {section}{\numberline {11.2}Cache: The Idea}{95}{section.11.2}%
\contentsline {subsection}{\numberline {11.2.1}Cache Memory: Directory and Tags}{95}{subsection.11.2.1}%
\contentsline {subsection}{\numberline {11.2.2}Cache Hits and Misses}{96}{subsection.11.2.2}%
\contentsline {subsection}{\numberline {11.2.3}Fully-Associative Cache}{96}{subsection.11.2.3}%
\contentsline {subsection}{\numberline {11.2.4}Fully-Associative Cache}{97}{subsection.11.2.4}%
\contentsline {section}{\numberline {11.3}Cache and Cache Controller}{97}{section.11.3}%
\contentsline {subsection}{\numberline {11.3.1}Cache Hit}{98}{subsection.11.3.1}%
\contentsline {subsection}{\numberline {11.3.2}Cache Miss}{98}{subsection.11.3.2}%
\contentsline {section}{\numberline {11.4}What if the Cache is Full?}{99}{section.11.4}%
\contentsline {subsection}{\numberline {11.4.1}Eviction Policies}{99}{subsection.11.4.1}%
\contentsline {subsection}{\numberline {11.4.2}Only Exploiting Spatial Locality}{99}{subsection.11.4.2}%
